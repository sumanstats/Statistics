use Test;
use Statistics;
use Probability::Distribution;

# Local function for testing two arrays with desired precision
sub element_wise_testing_with_precision(@functionoutput, @expectedoutput, $precision) {
    die "Provide equal elements!" if +@functionoutput != +@expectedoutput;
    loop (my $i = 0; $i < +@functionoutput; $i++)  {
        is-approx @functionoutput[$i], @expectedoutput[$i], $precision;
    }
}


# Normal distribution

is raku_dnorm(5), 1.4867195147342977e-06;
is raku_pnorm(5), 0.9999997133484281;
is raku_qnorm(5), NaN;


####	Testing raku_dgammma	####
is raku_dgamma(2,4, rate => 1), 0.1804470443154836;
is raku_dgamma(2,4, scale => 2), 0.030656620097620196;
is raku_dgamma(2,4, rate => 7, scale => 1/7), 0.0026620006060902226;
is raku_dgamma(2,4, scale => 1/7), 0.0026620006060902226;
is raku_dgamma(2,4, scale => 2, log => True), -3.4849066497880004;

####	Testing raku_pgamma	####
is raku_pgamma(2,4), 0.142876539501453;
is raku_pgamma(2,4, log_p => True), -1.9457743817619386;
is raku_pgamma(2,4, scale => 4, log_p => True), -6.34721274558465;
is raku_pgamma(2,4, rate => 4, scale => 1/4, log_p => True), -0.04330435635721676;

####	Testing raku_qgamma	####
is raku_qgamma(2,4), NaN;
is raku_qgamma(1,0.5,log_p => True), NaN;
is raku_qgamma(1,2), Inf;



####	Testing raku_dbeta	####
is raku_dbeta(2,4, 2), 0;
is raku_dbeta(2,4, 2, log => True), -Inf;
is raku_dbeta(1, 1, 0, ncp => 2,log => True), NaN;



####	Testing raku_pbeta	####
is raku_pbeta(1,1,1), 1;
is raku_pbeta(0.5,1,1), 0.5;
is raku_pbeta(0.5, 2, 4, ncp => 2), 0.6590492649101354;
is raku_pbeta(0.5, 2, 4, ncp => 2, log_p => True), -0.41695699020227484;


####	Testing raku_qbeta	####
is raku_qbeta(3, 4, 6), NaN;


####	Testing raku_dlnorm	####
is-approx raku_dlnorm(3), 0.07272825613999472, 1e-12;
is-approx raku_dlnorm(3, meanlog => 3, log => True), -3.825188436274744, 1e-12;

####	Testing raku_plnorm	####
is-approx raku_plnorm(3),0.8640313923585756, 1e-12;
is-approx raku_plnorm(5, meanlog => 2, sdlog => 2, log_p => True), -0.8613611948322474, 1e-12;

####	Testing raku_qlnorm	####
is raku_qlnorm(2), NaN;
is raku_qlnorm(0.5), 1;
is raku_qlnorm(0), 0;
is-approx raku_qlnorm(0.1), 0.2776062418520097, 1e-12;


####	Testing raku_rlnorm	####
is sub ($n) {raku_set_seed(1,3);raku_rlnorm($n)}(3), (1.1751666576815853, 1.551169741442785, 0.35333870325756733);
is sub ($n) {raku_set_seed(2,5);raku_rlnorm($n)}(3), (0.32145646272210726, 0.6608107230044763, 0.588862748840785);



# Chi-Squared Distribution

is raku_dchisq(4,3), 0.10798193302637614;    
is raku_dchisq(4,3,ncp => 4), 0.09970211254391682;
is raku_dchisq(4,3,ncp => 4, log => True ), -2.3055684132326415;
is raku_pchisq(3,4), 0.44217459962892536;
is raku_pchisq(0,0), 0;
is raku_pchisq(0,0, ncp => 4, lower_tail => False, log_p => True), -0.14541345786885906;
is raku_qchisq(5,4), NaN;
is raku_qchisq(4,4), NaN;
is raku_qchisq(1,3), Inf;
is raku_qchisq(0,4, ncp => 3), 0;
is raku_qchisq(0,0, ncp => 4, lower_tail => False, log_p => True), 0;
is raku_qchisq(75,25, ncp => 4, lower_tail => False, log_p => True), NaN;


####	Testing raku_df	####
is-approx raku_df(1,3,2), 0.27885480092693404, 1e-12;
is-approx raku_df(1,3,2,4), 0.2255355699113039, 1e-12;

####	Testing raku_pf	####
is-approx raku_pf(1,3,2), 0.46475800154489, 1e-12;
is-approx raku_pf(1,3,2, log_p => True), -0.7662384356489861, 1e-12;

####	Testing raku_qf	####
is raku_qf(4, 2, 1), NaN;
is raku_qf(1, 2, 1), Inf;
is raku_qf(0, 2, 1), 0;
is raku_qf(0, 2, 1, log_p => True), Inf;

####	Testing raku_rf	####
element_wise_testing_with_precision sub ($n) {raku_set_seed(2,5); raku_rf($n, 1, 2)}(3), 
                                    (0.18435620618029944, 1.04131942262752, 14.825797754677964),
                                    1e-12;


# Student t distribution

####	Testing raku_dt	####
is raku_dt(1,2), 0.19245008972987526, 1e-12;
is raku_dt(1,2,4), 0.011764946752329405, 1e-12;

####	Testing raku_pt	####
is-approx raku_pt(1,2), 0.7886751345948129, 1e-12;
is raku_pt(5,4), 0.9962547830593627;
is raku_pt(5,4, lower_tail => False, log_p => True), -5.587275735616685;

####	Testing raku_qt	####
is raku_qt(1,2), Inf;
is-approx raku_qt(0.2,2), -1.060660171779821, 1e-12;

####	Testing raku_rt	####

element_wise_testing_with_precision sub ($n) {raku_set_seed(3,10); raku_rt($n, 3, 4)}(5), 
                                    (3.2166139332581323, 2.9985780896164873, 3.4756218027009744, 5.833058113048503, 5.671377806342658),
                                    1e-12;



####	Testing raku_dbinom	####
is-approx raku_dbinom(1,2,0.5), 0.49999999999999994, 1e-12;
is raku_dbinom(1,2,1), 0;
is raku_dbinom(1,2,4), NaN;
is-approx raku_dbinom(1,2,0.2, log => True), -1.1394342831883648, 1e-12;

####	Testing raku_pbinom	####
is raku_pbinom(1,2,0.2), 0.96;
is-approx raku_pbinom(1,2,0.2, log_p => True), -0.04082199452025514, 1e-12;
is-approx raku_pbinom(1,2,0.2, lower_tail => False, log_p => True), -3.2188758248682006, 1e-12;


####	Testing raku_qbinom	####
is raku_qbinom(1,2,0.2), 2;
is raku_qbinom(1,2,3), NaN;
is raku_qbinom(1,2,3, log_p => True), NaN;

####	Testing raku_rbinom	####
is sub ($n) {raku_set_seed(1,9); raku_rbinom($n,2,0.2)}(3), (0, 0, 1);
is sub ($n) {raku_set_seed(20,16); raku_rbinom($n,2,0.2)}(4), (0, 1, 0, 0);


####	Testing raku_dcauchy	####
is-approx raku_dcauchy(1), 0.15915494309189535, 1e-12;
is-approx raku_dcauchy(1,2), 0.15915494309189535, 1e-12;
is-approx raku_dcauchy(1,2,3), 0.0954929658551372, 1e-12;

####	Testing raku_pcauchy	####
is raku_pcauchy(1), 0.75;
is raku_pcauchy(1,2), 0.25;
is-approx raku_pcauchy(1,2,3), 0.39758361765043326, 1e-12;

####	Testing raku_qcauchy	####
is raku_qcauchy(1), Inf;
is raku_qcauchy(1,2), Inf;
is raku_qcauchy(1,2,3), Inf;
is-approx raku_qcauchy(0.1), -3.077683537175254  , 1e-12;
is-approx raku_qcauchy(0.9),  3.0776835371752544 , 1e-12;
is raku_qcauchy(0.9, log_p => True),  NaN;
is raku_qcauchy(0), -Inf;

####	Testing raku_rcauchy	####
element_wise_testing_with_precision sub ($n) {raku_set_seed(2,5); raku_rcauchy($n)}(5), 
                                    (0.42607842113327926, -3.589933350285371, 1.8099808111776452, -0.5705944232265042, 1.3602101594780192),
                                    1e-12;

####	Testing raku_dexp	####
is-approx raku_dexp(1), 0.36787944117144233 , 1e-12;
is-approx raku_dexp(1,2), 0.2706705664732254 , 1e-12;
is-approx raku_dexp(1,2, log => True), -1.3068528194400546 , 1e-12;

####	Testing raku_pexp	####

is-approx raku_pexp(1), 0.6321205588285577 , 1e-12;
is-approx raku_pexp(1,2), 0.8646647167633873 , 1e-12;
is-approx raku_pexp(1,2, log_p => True), -0.14541345786885906 , 1e-12;
is-approx raku_pexp(4,2), 0.9996645373720975, 1e-12;

####	Testing raku_qexp	####

is raku_qexp(1), Inf;
is raku_qexp(1,2), Inf;
is raku_qexp(1,2, log_p => True), NaN;
is raku_qexp(4,2), NaN;
is-approx raku_qexp(0.5), 0.6931471805599453, 1e-12;
is raku_qexp(0.5, log_p => True), NaN;


####	Testing raku_rexp	####
element_wise_testing_with_precision sub ($n) {raku_set_seed(2,5); raku_rexp($n)}(2), 
                                    (1.411974694734631, 0.17295038773979732),
                                    1e-12;

element_wise_testing_with_precision sub ($n) {raku_set_seed(2,5); raku_rexp($n, 4)}(2), 
                                    (0.35299367368365775, 0.04323759693494933),
                                    1e-12;

####	Testing raku_dgeom	####
is raku_dgeom(1,0.5), 0.25 ;
is raku_dgeom(1, 1), 0 ;
is raku_dgeom(1, 1, log => True), -Inf;

####	Testing raku_pgeom	####
is raku_pgeom(1,0.5), 0.75 ;
is raku_pgeom(1, 1), 1 ;
is raku_pgeom(1, 1, log_p => True), 0;
is raku_pgeom(1,2), NaN;

####	Testing raku_qgeom	####
is raku_qgeom(1,0.5), Inf ;
is raku_qgeom(1, 1), 0 ;
is raku_qgeom(1, 1, log_p => True), NaN;
is raku_qgeom(1,2), NaN;
is raku_qgeom(1,0), NaN;

####	Testing raku_rgeom	####
is sub ($n) {raku_set_seed(2,5); raku_rgeom($n,0.1)}(2), (13, 5);
is sub ($n) {raku_set_seed(2,5); raku_rgeom($n,0.6)}(4), (1, 1, 1, 0);

####	Testing raku_dhyper	####
is-approx raku_dhyper(1, 2, 3, 4), 0.4, 1e-12;  

####	Testing raku_phyper	####
is-approx raku_phyper(1, 2, 3, 4), 0.4, 1e-12;  
is-approx raku_phyper(1, 2, 3, 4, lower_tail => False), 0.6, 1e-12;  
is raku_phyper(1, 2, 3, 6), NaN;  
is raku_phyper(1, 2, 3, 5, lower_tail => False), 1;  


####	Testing raku_qhyper	####
is raku_qhyper(1, 2, 3, 4), 2;  
is raku_qhyper(1, 2, 3, 4, lower_tail => False), 1;  
is raku_qhyper(1, 2, 3, 6), NaN;  
is raku_qhyper(1, 2, 3, 5, lower_tail => False), 2;  
is raku_qhyper(0, 2, 3, 5, lower_tail => False), 2;  
is raku_qhyper(0.5, 2, 3, 5, lower_tail => False), 2;
is raku_qhyper(0, 20, 3, 6, lower_tail => False), 6; 
is raku_qhyper(0.7, 2, 3, 6, lower_tail => False), NaN;  

####	Testing raku_rhyper	####
is sub ($n) {raku_set_seed(1,9); raku_rhyper($n,2,3,4)}(1), (2);
is sub ($n) {raku_set_seed(12,7); raku_rhyper($n,2,3,4)}(7), (1, 2, 2, 2, 1, 2, 2);

# Other functions

is factorial(9), 362880;
is factorial(0), 1;
is-approx factorial(0.2), 0.9181687423997607, 0.01;
is-approx factorial(10.2), 5819090.083978569, 0.01;

is raku_choose(3,1), 3;
is raku_choose(0,0), 1;
is raku_choose(3,5), 0;


is multinomial_coef(0,0), 1;
is multinomial_coef(0,2), 1;
is multinomial_coef(1,1), 2;
is multinomial_coef(3,4,5), 27720;
is multinomial_coef(3,4,5,9), 8147739600;

done-testing;
